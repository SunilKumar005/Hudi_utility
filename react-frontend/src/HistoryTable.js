import React, { useEffect, useState } from 'react';import {    Table,    TableHead,    TableRow,    TableCell,    TableBody,    Button,    TextField,    Box,    Typography,    Card,    CardContent,    TablePagination,    IconButton,} from '@mui/material';import { MagnifyingGlass as MagnifyingGlassIcon } from '@phosphor-icons/react/dist/ssr/MagnifyingGlass';import { DatePicker } from '@mui/x-date-pickers/DatePicker';import { useNavigate } from 'react-router-dom';import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';import axios from 'axios';import dayjs from 'dayjs';const statusConfig = {    success: {        label: 'Success',        styles: {            backgroundColor: 'rgba(0, 128, 0, 0.1)',            color: 'rgb(0, 100, 0)',            border: '1px solid rgba(0, 128, 0, 0.2)',        },    },    failed: {        label: 'Failed',        styles: {            backgroundColor: 'rgba(255, 0, 0, 0.1)',            color: 'rgb(139, 0, 0)',            border: '1px solid rgba(255, 0, 0, 0.2)',        },    },    pending: {        label: 'Pending',        styles: {            backgroundColor: 'rgba(255, 255, 0, 0.1)',            color: 'rgb(139, 139, 0)',            border: '1px solid rgba(255, 255, 0, 0.2)',        },    },};function HistoryTable() {    const [history, setHistory] = useState([]);    const [searchTerm, setSearchTerm] = useState('');    const [startDate, setStartDate] = useState(null);    const [endDate, setEndDate] = useState(null);    const [loading, setLoading] = useState(false);    const [page, setPage] = useState(0);    const [rowsPerPage, setRowsPerPage] = useState(10);    const navigate = useNavigate();    useEffect(() => {        fetchHistory();    }, []);    const fetchHistory = async (startDate = '', endDate = '', transactionId = '') => {        setLoading(true);        try {            const params = {                start_date: startDate ? dayjs(startDate).format('YYYY-MM-DD') : '',                end_date: endDate ? dayjs(endDate).format('YYYY-MM-DD') : '',                transaction_id: transactionId,            };            const response = await axios.get('http://127.0.0.1:8000/bootstrap_history/', { params });            setHistory(response.data);        } catch (error) {            console.error("Error fetching history:", error);        } finally {            setLoading(false);        }    };    const handleSearch = () => {        fetchHistory(startDate, endDate, searchTerm);    };    const handleRerun = (transaction) => {        const formData = JSON.parse(transaction.transaction_data);        formData.spark_config = JSON.stringify(formData.spark_config, null, 2);        navigate('/bootstrap', { state: { formData } });    };    const handleChangePage = (event, newPage) => {        setPage(newPage);    };    const handleChangeRowsPerPage = (event) => {        setRowsPerPage(parseInt(event.target.value, 10));        setPage(0);    };    return (        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', padding: 2 }}>            <Card sx={{ width: '90vw', maxHeight: '90vh', boxShadow: '0 0 20px rgba(0, 0, 0, 0.15)', margin: '0 auto' }}>                <CardContent>                    <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 4, mt: 2, mr: 2,ml: 2 }}>                        <Box sx={{ flexGrow: 1, mr: 2 }}>                            <TextField                                label="Search by Transaction ID"                                value={searchTerm}                                onChange={(e) => setSearchTerm(e.target.value)}                                InputProps={{                                    startAdornment: (                                        <IconButton>                                            <MagnifyingGlassIcon />                                        </IconButton>                                    ),                                }}                                sx={{                                    borderRadius: '12px',                                    '& .MuiOutlinedInput-root': {                                        borderRadius: '12px',                                    },                                }}                                fullWidth                            />                        </Box>                        <Box sx={{ display: 'flex', gap: 2 }}>                            <LocalizationProvider dateAdapter={AdapterDayjs}>                                <DatePicker                                    label="Start Date"                                    value={startDate}                                    onChange={(date) => setStartDate(date)}                                    slotProps={{                                        textField: {                                            size: 'medium',                                            InputProps: {                                                sx: { borderRadius: '12px', backgroundColor: 'white', width: '13vw' },                                            },                                        },                                    }}                                />                                <DatePicker                                    label="End Date"                                    value={endDate}                                    onChange={(date) => setEndDate(date)}                                    slotProps={{                                        textField: {                                            size: 'medium',                                            InputProps: {                                                sx: { borderRadius: '12px', backgroundColor: 'white', width: '13vw' },                                            },                                        },                                    }}                                />                                <Button                                    variant="contained"                                    onClick={handleSearch}                                    sx={{                                        height: '40px',                                        width: '100px',                                        padding: '8px 16px',                                        borderRadius: '12px',                                        marginTop: '1vh',                                    }}                                >                                    Fetch                                </Button>                            </LocalizationProvider>                        </Box>                    </Box>                    {loading ? (                        <Typography>Loading...</Typography>                    ) : (                        <>                            <Box sx={{                                maxHeight: '60vh',                                overflowY: 'auto',				margin: 2,                                '&::-webkit-scrollbar': { width: '0px' },                                '&::-webkit-scrollbar-thumb': { backgroundColor: '#888', borderRadius: '4px' },                                '&::-webkit-scrollbar-thumb:hover': { backgroundColor: '#555' },                                '&::-webkit-scrollbar-track': { background: '#f1f1f1' },                            }}>                                <Table sx={{ borderRadius: '12px', overflow: 'hidden' }}>                                    <TableHead sx={{ backgroundColor: '#212636', color: '#ffffff' }}>                                        <TableRow>                                            <TableCell sx={{ color: '#ffffff', fontSize: '0.95rem', fontWeight: 500 }}>Transaction ID</TableCell>                                            <TableCell sx={{ color: '#ffffff', fontSize: '0.95rem', fontWeight: 500 }}>Job ID</TableCell>                                            <TableCell sx={{ color: '#ffffff', fontSize: '0.95rem', fontWeight: 500 }}>Status</TableCell>                                            <TableCell sx={{ color: '#ffffff', fontSize: '0.95rem', fontWeight: 500 }}>Start Time</TableCell>                                            <TableCell sx={{ color: '#ffffff', fontSize: '0.95rem', fontWeight: 500 }}>End Time</TableCell>                                            <TableCell sx={{ color: '#ffffff', fontSize: '0.95rem', fontWeight: 500 }}>Action</TableCell>                                        </TableRow>                                    </TableHead>                                    <TableBody>                                        {history.length === 0 ? (                                            <TableRow>                                                <TableCell colSpan={6} sx={{ textAlign: 'center', color: 'text.secondary', padding: '16px' ,fontSize: '1.15rem', fontWeight: 500  }}>                                                    No Transactions Found!                                                </TableCell>                                            </TableRow>                                        ) : (                                            history.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((transaction, index) => {                                                const transactionStatus = transaction.status ? transaction.status.trim() : '';                                                const { label = 'Unknown', styles = {} } = statusConfig[transactionStatus.toLowerCase()] || {};                                                const rowBackground = index % 2 === 0 ? '#ffffff' : '#f5f5f5';                                                return (                                                    <TableRow key={transaction.transaction_id} sx={{ backgroundColor: rowBackground }}>                                                        <TableCell>{transaction.transaction_id}</TableCell>                                                        <TableCell>{transaction.job_id}</TableCell>                                                        <TableCell>                                                            <Box sx={{                                                                display: 'inline-flex',                                                                alignItems: 'center',                                                                px: 1.5,                                                                py: 0.5,                                                                borderRadius: '9999px',                                                                fontSize: '0.75rem',                                                                fontWeight: 500,                                                                ...styles,                                                            }}>                                                                {label}                                                            </Box>                                                        </TableCell>                                                        <TableCell>{new Date(transaction.start_time).toLocaleString()}</TableCell>                                                        <TableCell>{transaction.end_time ? new Date(transaction.end_time).toLocaleString() : 'In Progress'}</TableCell>                                                        <TableCell>                                                            <Button variant="outlined" onClick={() => handleRerun(transaction)}>                                                                Rerun                                                            </Button>                                                        </TableCell>                                                    </TableRow>                                                );                                            })                                        )}                                    </TableBody>                                </Table>                            </Box>                            <TablePagination                                rowsPerPageOptions={[5, 10, 25]}                                component="div"                                count={history.length}                                rowsPerPage={rowsPerPage}                                page={page}                                onPageChange={handleChangePage}                                onRowsPerPageChange={handleChangeRowsPerPage}                            />                        </>                    )}                </CardContent>            </Card>        </Box>    );}export default HistoryTable;